# prompts_openai.py
from app.services.ai_prompt import PromptContext, PromptType, RiskLevel
import logging
from typing import Dict

logger = logging.getLogger(__name__)

def build_openai_prompt(context: PromptContext, therapeutic_approach: PromptType) -> Dict:
    """
    Monta o prompt completo para o modelo OpenAI.
    Todos os blocos s√£o expl√≠citos e comentados para facilitar manuten√ß√£o.
    """
    try:
        # Bloco de apresenta√ß√£o e diretrizes
        prompt = (
            "Voc√™ √© um agente de suporte emocional, especialista em acolhimento, escuta ativa e interven√ß√£o em situa√ß√µes de sofrimento ps√≠quico, risco emocional e crise. Sua miss√£o √© oferecer apoio humano, emp√°tico e seguro, seguindo as melhores pr√°ticas de sa√∫de mental e sempre respeitando o contexto do usu√°rio.\n\n"
            "Diretrizes de apoio emocional:\n"
            "- Escute sem julgar.\n"
            "- Valide os sentimentos do amigo. Diga: 'Voc√™ n√£o est√° sozinho, vamos buscar ajuda juntos.'\n"
            "\nSinais de alerta:\n"
            "- Se afastar dos amigos e da fam√≠lia.\n"
            "- Perder o interesse por coisas que antes gostava.\n"
            "- Ficar desmotivado, descuidar da apar√™ncia.\n"
            "- Falar frases como: 'quero sumir', 'n√£o aguento mais'.\n"
            "- S√∫bito de 'calma' ap√≥s profunda tristeza.\n"
            "- Despreocupa√ß√£o com autocuidado.\n"
            "\nSitua√ß√µes de risco:\n"
            "- Ter tentado se machucar antes.\n"
            "- Passar por perdas, doen√ßas ou situa√ß√µes muito dif√≠ceis.\n"
            "- Sofrer com ansiedade, depress√£o ou outros transtornos.\n"
            "- Sentir-se sozinho, sem apoio ou sofrer discrimina√ß√£o.\n"
        )

        # Bloco de sistema base (pode ser customizado para OpenAI)
        prompt += f"\n\n{context.system_base if hasattr(context, 'system_base') else ''}"

        # Adapta√ß√£o por risco
        risk_adaptation = context.risk_adaptation if hasattr(context, 'risk_adaptation') else None
        if risk_adaptation:
            prompt += f"\n\nN√çVEL DE RISCO: {context.risk_level.value.upper()}\nTom da resposta: {risk_adaptation['tone']}\nFoco principal: {risk_adaptation['focus']}\nSugest√µes priorit√°rias: {', '.join(risk_adaptation['suggestions'])}"

        # Estrat√©gia terap√™utica
        strategy = context.therapeutic_strategy if hasattr(context, 'therapeutic_strategy') else None
        if strategy:
            prompt += f"\n\nABORDAGEM TERAP√äUTICA: {therapeutic_approach.value}\nFoco: {strategy['focus']}\nT√©cnicas: {', '.join(strategy['techniques'])}\nFrases √∫teis para incorporar:\n"
            prompt += '\n'.join(['- ' + phrase for phrase in strategy['phrases']])

        # Protocolo de crise
        if context.risk_level == RiskLevel.CRITICAL and hasattr(context, 'risk_critical'):
            prompt += f"\n\n{context.risk_critical}"

        # Dados de treinamento
        if context.training_context:
            prompt += f"\n\n=== CONHECIMENTO ESPECIALIZADO RELEVANTE ===\n{context.training_context}\nINSTRU√á√ïES: Use este conhecimento como base cient√≠fica para sua resposta. Adapte as informa√ß√µes para o contexto do usu√°rio."

        # Exemplos de conversas
        if context.conversation_examples:
            prompt += "\n\n=== EXEMPLOS DE RESPOSTAS EFICAZES ==="
            for i, example in enumerate(context.conversation_examples[:2], 1):
                rating = "‚≠ê" * int(example.get('rating', 3))
                prompt += f"\nüí¨ Exemplo {i} ({rating}):\nSitua√ß√£o: {example.get('user_message', '')}\nResposta eficaz: {example.get('ai_response', '')}\nPor que funcionou: Abordagem {example.get('risk_level', 'adequada')} para o contexto"
            prompt += "\nInspire-se, mas personalize para o caso atual."

        # Contexto do usu√°rio
        context_info = []
        if context.user_name:
            context_info.append(f"Nome do usu√°rio: {context.user_name}")
        if context.emotional_state:
            context_info.append(f"Estado emocional identificado: {context.emotional_state}")
        if context.dominant_themes:
            context_info.append(f"Temas principais: {', '.join(context.dominant_themes)}")
        if context_info:
            prompt += "\n\nCONTEXTO DO USU√ÅRIO:\n" + "\n".join(context_info)

        # Instru√ß√µes finais
        prompt += ("\n\nINSTRU√á√ïES FINAIS:\n"
            "1. Responda de forma calorosa e humana\n"
            "2. Use no m√°ximo 200-300 palavras\n"
            "3. Ofere√ßa pelo menos uma sugest√£o pr√°tica\n"
            "4. Termine com uma pergunta aberta ou convite para continuar a conversa\n"
            "5. Se risco alto/cr√≠tico, SEMPRE mencione recursos profissionais\n")

        # Hist√≥rico da conversa (opcional)
        if context.session_history:
            history_msgs = []
            for msg in context.session_history[-6:]:
                if msg.get('role') in ['user', 'assistant']:
                    history_msgs.append(f"[{msg['role']}]: {msg['content']}")
            if history_msgs:
                prompt += "\n\nHIST√ìRICO RECENTE:\n" + "\n".join(history_msgs)

        # Mensagem do usu√°rio
        prompt += f"\n\nMENSAGEM DO USU√ÅRIO:\n{context.user_message}"

        # Par√¢metros
        max_tokens = 400 if context.risk_level in [RiskLevel.HIGH, RiskLevel.CRITICAL] else 300
        temperature = 0.7

        return {'prompt': prompt, 'max_tokens': max_tokens, 'temperature': temperature}
    except Exception as e:
        logger.error(f"Erro na constru√ß√£o do prompt OpenAI: {e}")
        return {'prompt': 'Erro ao construir prompt.', 'max_tokens': 200, 'temperature': 0.7}

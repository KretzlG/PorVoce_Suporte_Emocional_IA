#!/usr/bin/env python3
"""
Script para verificar se a aplica√ß√£o est√° pronta para deploy no Render
"""

import os
import sys
from pathlib import Path

def check_file_exists(file_path, description):
    """Verifica se um arquivo existe"""
    if os.path.exists(file_path):
        print(f"‚úÖ {description}: {file_path}")
        return True
    else:
        print(f"‚ùå {description}: {file_path} (FALTANDO)")
        return False

def check_requirements():
    """Verifica se gunicorn est√° no requirements.txt"""
    try:
        # Tentar diferentes encodings
        encodings = ['utf-8', 'utf-8-sig', 'latin-1', 'cp1252']
        content = None
        
        for encoding in encodings:
            try:
                with open('requirements.txt', 'r', encoding=encoding) as f:
                    content = f.read()
                    break
            except UnicodeDecodeError:
                continue
        
        if content is None:
            print("‚ùå N√£o foi poss√≠vel ler requirements.txt")
            return False
            
        if 'gunicorn' in content:
            print("‚úÖ Gunicorn encontrado no requirements.txt")
            return True
        else:
            print("‚ùå Gunicorn N√ÉO encontrado no requirements.txt")
            return False
    except FileNotFoundError:
        print("‚ùå requirements.txt n√£o encontrado")
        return False

def check_app_import():
    """Verifica se a aplica√ß√£o pode ser importada corretamente"""
    print("\nüîç Verificando importa√ß√£o da aplica√ß√£o:")
    
    try:
        # Teste 1: Importar o m√≥dulo wsgi
        print("  1. Importando m√≥dulo wsgi...")
        import wsgi as wsgi_module
        print("     ‚úÖ M√≥dulo wsgi importado com sucesso")
        
        # Teste 2: Importar a aplica√ß√£o Flask
        print("  2. Importando aplica√ß√£o Flask...")
        from wsgi import app
        print(f"     ‚úÖ Aplica√ß√£o importada: {type(app)}")
        
        # Teste 3: Verificar se app √© uma inst√¢ncia Flask v√°lida
        print("  3. Verificando tipo da aplica√ß√£o...")
        from flask import Flask
        if isinstance(app, Flask):
            print("     ‚úÖ app √© uma inst√¢ncia Flask v√°lida")
        else:
            print(f"     ‚ùå app n√£o √© uma inst√¢ncia Flask: {type(app)}")
            return False
        
        # Teste 4: Simular importa√ß√£o do gunicorn
        print("  4. Simulando importa√ß√£o do gunicorn...")
        import importlib
        module = importlib.import_module('wsgi')
        gunicorn_app = getattr(module, 'app')
        print(f"     ‚úÖ Gunicorn pode acessar wsgi:app: {type(gunicorn_app)}")
        
        return True
        
    except ImportError as e:
        print(f"     ‚ùå Erro de importa√ß√£o: {e}")
        return False
    except AttributeError as e:
        print(f"     ‚ùå Erro de atributo: {e}")
        print("     üí° Certifique-se que existe 'app' no arquivo wsgi.py")
        return False
    except Exception as e:
        print(f"     ‚ùå Erro inesperado: {e}")
        import traceback
        traceback.print_exc()
        return False

def check_env_vars():
    """Verifica vari√°veis de ambiente essenciais"""
    required_vars = [
        'SECRET_KEY',
        'DATABASE_URL',
        'FLASK_ENV'
    ]
    
    optional_vars = [
        'OPENAI_API_KEY',
        'JWT_SECRET_KEY'
    ]
    
    print("\nüîç Verificando vari√°veis de ambiente necess√°rias:")
    
    missing_required = []
    for var in required_vars:
        if os.environ.get(var):
            print(f"‚úÖ {var}: configurado")
        else:
            print(f"‚ö†Ô∏è  {var}: N√ÉO configurado (ser√° necess√°rio no Render)")
            missing_required.append(var)
    
    for var in optional_vars:
        if os.environ.get(var):
            print(f"‚úÖ {var}: configurado")
        else:
            print(f"‚ÑπÔ∏è  {var}: n√£o configurado (opcional)")
    
    return len(missing_required) == 0
    
    return len(missing_required) == 0

def main():
    """Fun√ß√£o principal de verifica√ß√£o"""
    print("üöÄ VERIFICA√á√ÉO PR√â-DEPLOY PARA RENDER")
    print("=" * 50)
    
    all_good = True
    
    # Verificar arquivos essenciais
    print("\nüìÅ Verificando arquivos essenciais:")
    files_to_check = [
        ('requirements.txt', 'Depend√™ncias Python'),
        ('wsgi.py', 'Arquivo principal WSGI'),
        ('config.py', 'Configura√ß√µes'),
        ('Procfile', 'Comando de execu√ß√£o'),
        ('runtime.txt', 'Vers√£o do Python'),
        ('render.yaml', 'Configura√ß√£o do Render'),
    ]
    
    for file_path, description in files_to_check:
        if not check_file_exists(file_path, description):
            all_good = False
    
    # Verificar requirements.txt
    print("\nüì¶ Verificando depend√™ncias:")
    if not check_requirements():
        all_good = False
    
    # Verificar estrutura da aplica√ß√£o
    print("\nüèóÔ∏è  Verificando estrutura da aplica√ß√£o:")
    app_structure = [
        ('app/__init__.py', 'Inicializa√ß√£o da app'),
        ('app/routes/', 'Rotas'),
        ('app/models/', 'Modelos'),
        ('migrations/', 'Migra√ß√µes do banco'),
    ]
    
    for path, description in app_structure:
        if not check_file_exists(path, description):
            all_good = False
    
    # Verificar importa√ß√£o da aplica√ß√£o
    if not check_app_import():
        all_good = False
    
    # Verificar vari√°veis de ambiente
    if not check_env_vars():
        all_good = False
    
    print("\n" + "=" * 50)
    
    if all_good:
        print("üéâ TUDO PRONTO PARA DEPLOY!")
        print("\nüìã Pr√≥ximos passos:")
        print("1. Fa√ßa commit e push das altera√ß√µes")
        print("2. Crie conta no Render (render.com)")
        print("3. Crie PostgreSQL database")
        print("4. Crie Web Service conectado ao seu repo")
        print("5. Configure as vari√°veis de ambiente")
        print("6. Aguarde o deploy completar")
        return 0
    else:
        print("‚ö†Ô∏è  ALGUNS PROBLEMAS ENCONTRADOS")
        print("Corrija os itens marcados com ‚ùå antes do deploy")
        return 1

if __name__ == '__main__':
    sys.exit(main())
